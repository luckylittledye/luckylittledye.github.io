<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="https://luckylittledye/github.io/atom.xml" rel="self"/>
  
  <link href="https://luckylittledye/github.io/"/>
  <updated>2024-05-08T13:46:31.322Z</updated>
  <id>https://luckylittledye/github.io/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MybatisPlus</title>
    <link href="https://luckylittledye/github.io/2024/05/08/MybatisPlus/"/>
    <id>https://luckylittledye/github.io/2024/05/08/MybatisPlus/</id>
    <published>2024-05-08T13:36:35.000Z</published>
    <updated>2024-05-08T13:46:31.322Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h1><img src="D:/blog/source/_posts/md/MybatisPlus1.jpg"/>![图片](D:/blog/source/_posts/md/MybatisPlus1.jpg)]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;常用注解&quot;&gt;&lt;a href=&quot;#常用注解&quot; class=&quot;headerlink&quot; title=&quot;常用注解&quot;&gt;&lt;/a&gt;常用注解&lt;/h1&gt;&lt;img src=&quot;D:/blog/source/_posts/md/MybatisPlus1.jpg&quot;/&gt;
![图片](D:/b</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>AOP</title>
    <link href="https://luckylittledye/github.io/2024/05/06/AOP/"/>
    <id>https://luckylittledye/github.io/2024/05/06/AOP/</id>
    <published>2024-05-06T14:40:54.000Z</published>
    <updated>2024-05-06T17:26:45.876Z</updated>
    
    <content type="html"><![CDATA[<h1 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h1><p>◆动态代理是面向切面编程最主流的实现。而SpringAOP 是Spring框架的高级技术,旨在管理bean对象的过程中，主要通过底层的动态代理机制,对特定的方法进行编程。  </p><h1 id="AOP核心概念"><a href="#AOP核心概念" class="headerlink" title="AOP核心概念"></a>AOP核心概念</h1><p>●连接点: JoinPoint,可以被AOP控制的方法( 暗含方法执行时的相关信息)<br>●通知: Advice,指哪些重复的逻辑,也就是共性功能(最终体现为一个方法)<br>●切入点: PointCut,匹配连接点的条件,通知仅会在切入点方法执行时被应用<br>●切面: Aspect,描述通知与切入点的对应关系(通知+切入点)<br>●目标对象: Target, 通知所应用的对象  </p><h3 id="通知"><a href="#通知" class="headerlink" title="通知"></a>通知</h3><h4 id="通知类型"><a href="#通知类型" class="headerlink" title="通知类型"></a>通知类型</h4><ol><li>@Around: 环绕通知，此注解标注的通知方法在目标方法前、后都被执行</li><li>@Before: 前置通知，此注解标注的通知方法在目标方法前被执行</li><li>@After :后置通知，此注解标注的通知方法在目标方法后被执行，无论是否有异常都会执行</li><li>@AfterReturning :返回后通知， 此注解标注的通知方法在目标方法后被执行，有异常不会执行</li><li>@AfterThrowing :异常后通知，此注解标注的通知方法发生异常后执行</li></ol><h4 id="通知顺序"><a href="#通知顺序" class="headerlink" title="通知顺序"></a>通知顺序</h4><ol><li>不同切面类中，默认按照切面类的类名字母排序:<br>◆目标方法前的通知方法:字母排名靠前的先执行<br>◆目标方法后的通知方法:字母排名靠前的后执行  </li><li>用@Order(数字)加在切面类上来控制顺序<br>◆目标方法前的通知方法:数字小的先执行<br>◆目标方法后的通知方法:数字小的后执行</li></ol><h3 id="切入点表达式-execution"><a href="#切入点表达式-execution" class="headerlink" title="切入点表达式-execution"></a>切入点表达式-execution</h3><ol><li>execution主要根据方法的返回值、包名、类名、方法名、方法参数等信息来匹配，语法为:<br>execution(访问修饰符?返回值包名 .类名. ?方法名(方法参数) throws异常)<br>●其中带 ?的表示可以省略的部分<br>◆访问修饰符:可省略(比如:public、protected)<br>◆包名.类名:可省略<br>◆throws 异常:可省略(注意是方法.上声明抛出的异常，不是实际抛出的异常)  </li><li>execution(@annotion(自定义注解的全类名))<br>在要匹配的方法上加上自定义注解</li></ol><h3 id="连接点"><a href="#连接点" class="headerlink" title="连接点"></a>连接点</h3><p>●在Spring中 用JoinPoint抽象了连接点，用它可以获得方法执行时的相关信息，如目标类名、方法名、方法参数等。<br>➢对于@Around通知，获取连接点信息只能使用ProceedingJoinPoint<br>➢对于其他四种通知，获取连接点信息只能使用  JoinPoint ，它是ProceedingJoinPoint 的父类型  </p><p>String className &#x3D; joinPoint . getTarget(). getClass(). getName(); &#x2F;&#x2F;获取目标类名<br>Signature signature &#x3D; joinPoint . getSignature(); &#x2F;&#x2F;获取目标方法签名<br>String methodName &#x3D; joinPoint . getSignature(). getName(); &#x2F;&#x2F;获取目标方法名<br>Object[] args &#x3D; joinPoint. getArgs(); &#x2F;&#x2F;获取目标方法运行参数  </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;AOP&quot;&gt;&lt;a href=&quot;#AOP&quot; class=&quot;headerlink&quot; title=&quot;AOP&quot;&gt;&lt;/a&gt;AOP&lt;/h1&gt;&lt;p&gt;◆动态代理是面向切面编程最主流的实现。而SpringAOP 是Spring框架的高级技术,旨在管理bean对象的过程中，主要通过底层</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>事务和索引</title>
    <link href="https://luckylittledye/github.io/2024/05/03/%E4%BA%8B%E5%8A%A1%E5%92%8C%E7%B4%A2%E5%BC%95/"/>
    <id>https://luckylittledye/github.io/2024/05/03/%E4%BA%8B%E5%8A%A1%E5%92%8C%E7%B4%A2%E5%BC%95/</id>
    <published>2024-05-03T14:27:17.000Z</published>
    <updated>2024-05-04T14:19:13.321Z</updated>
    
    <content type="html"><![CDATA[<h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><p><em>开启事务：start transaction;&#x2F;begin;<br>提交事务：commit;<br>回滚事务：rollback;</em></p><h3 id="四大特性（ACID）"><a href="#四大特性（ACID）" class="headerlink" title="四大特性（ACID）"></a>四大特性（ACID）</h3><p><em>原子性：事务是不可分割的最小单元，要么全部成功，要么全部失败；<br>一致性：事务完成时，必须使所有的数据都保持一致状态；<br>隔离性：数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行；<br>持久性：事务一旦提交或回滚，它对数据库中的数据的改变就是永久的。</em>  </p><h3 id="spring事务管理"><a href="#spring事务管理" class="headerlink" title="spring事务管理"></a>spring事务管理</h3><p><em>spring事务管理注解:@Transactional(rollbackfor,propagation)<br>-rollbackfor控制出现何种异常类型后回滚事务<br>&emsp;Exception.class：任何异常都回滚事务<br>-propagation控制事务传播行为<br>&emsp;REQUIRED：默认，需要事务，有则加入，无则创建新事务<br>&emsp;REQUIRES_NEW：需要新事务，无论有无，总是创建新事务</em>  </p><h1 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h1><p><em>帮助数据库高效获取数据的数据结构。</em>  </p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p><em>提高数据查询的效率，降低数据库的IO成本。<br>通过索引列对数据进行排序，降低数据排序的成本，降低CPU消耗。</em>  </p><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p><em>索引会 占用存储空间。<br>索引大大提高了查询效率，同时却也降低了insert、update、delete的效率。</em></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;事务&quot;&gt;&lt;a href=&quot;#事务&quot; class=&quot;headerlink&quot; title=&quot;事务&quot;&gt;&lt;/a&gt;事务&lt;/h1&gt;&lt;p&gt;&lt;em&gt;开启事务：start transaction;&amp;#x2F;begin;&lt;br&gt;提交事务：commit;&lt;br&gt;回滚事务：rollba</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>maven项目</title>
    <link href="https://luckylittledye/github.io/2024/04/28/maven%E9%A1%B9%E7%9B%AE/"/>
    <id>https://luckylittledye/github.io/2024/04/28/maven%E9%A1%B9%E7%9B%AE/</id>
    <published>2024-04-28T15:03:11.000Z</published>
    <updated>2024-04-28T15:12:30.402Z</updated>
    
    <content type="html"><![CDATA[<h1 id="maven项目目录情况"><a href="#maven项目目录情况" class="headerlink" title="maven项目目录情况"></a>maven项目目录情况</h1><p><em>-src<br>&emsp;-main&emsp;&#x2F;&#x2F;存放项目资源<br>&emsp;&emsp;-java&emsp;&#x2F;&#x2F;java源代码<br>&emsp;&emsp;-resource&emsp;&#x2F;&#x2F;配置文件<br>&emsp;-test&emsp;&#x2F;&#x2F;存放测试资源<br>&emsp;&emsp;-java&emsp;&#x2F;&#x2F;java源代码<br>&emsp;&emsp;-resource&emsp;&#x2F;&#x2F;配置文件(不常用)</em>  </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;maven项目目录情况&quot;&gt;&lt;a href=&quot;#maven项目目录情况&quot; class=&quot;headerlink&quot; title=&quot;maven项目目录情况&quot;&gt;&lt;/a&gt;maven项目目录情况&lt;/h1&gt;&lt;p&gt;&lt;em&gt;-src&lt;br&gt;&amp;emsp;-main&amp;emsp;&amp;#x2F</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>反射</title>
    <link href="https://luckylittledye/github.io/2024/04/27/%E5%8F%8D%E5%B0%84/"/>
    <id>https://luckylittledye/github.io/2024/04/27/%E5%8F%8D%E5%B0%84/</id>
    <published>2024-04-27T14:27:04.000Z</published>
    <updated>2024-04-27T17:00:43.077Z</updated>
    
    <content type="html"><![CDATA[<h1 id="获取Class对象的三种方式"><a href="#获取Class对象的三种方式" class="headerlink" title="获取Class对象的三种方式"></a>获取Class对象的三种方式</h1><p>●Classc1 &#x3D;类名.class</p><p>●调用Class提供方 法: public static Class forName(String package);</p><p>●0bject提供的方法: public Class getClass(); Class c3 &#x3D;对象.getClass();  </p><h2 id="从类中获取构造器的方法和作用"><a href="#从类中获取构造器的方法和作用" class="headerlink" title="从类中获取构造器的方法和作用"></a>从类中获取构造器的方法和作用</h2><p>getConstructors()&#x2F;&#x2F;获取全部构造器(只能获取public修饰的)</p><p>getDeclaredConstructors()&#x2F;&#x2F;获取全部构造器(只要存在就能拿到)</p><p>getConstructor(Class parameterTypes)&#x2F;&#x2F;获取某个构造器(只能获取public修饰的)</p><p>getDeclaredConstructor(Class parameterTypes) 获取某个构造器(只要存在就能拿到)</p><p>newInstance(参数)&#x2F;&#x2F;调用此构造器对象表示的构造器，并传入参数，完成对象的初始化并返回  </p><p>setAccessible(boolean flag)&#x2F;&#x2F;设置为true，表示禁止检查访问控制（暴力反射，可调用private构造器）  </p><h2 id="从类中获取成员变量的方法和作用"><a href="#从类中获取成员变量的方法和作用" class="headerlink" title="从类中获取成员变量的方法和作用"></a>从类中获取成员变量的方法和作用</h2><p>getFields()<br>getDeclaredFields()<br>getField(String name)<br>getDeclaredField(String name)  </p><p>作用：赋值<br>set()<br>get()<br>setAccessible(boolean flag)  </p><h2 id="从类中获取成员方法的方法和作用"><a href="#从类中获取成员方法的方法和作用" class="headerlink" title="从类中获取成员方法的方法和作用"></a>从类中获取成员方法的方法和作用</h2><p>getMethods()<br>getDeclaredMethods()<br>getMethod(String name, Class<?>... parameterTypes)  getDeclaredMethod(String name, Class<?>… parameterTypes)  </p><p>作用：执行<br>invoke(0bject obj, object… args)<br>setAccessible(boolean f1ag)  </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;获取Class对象的三种方式&quot;&gt;&lt;a href=&quot;#获取Class对象的三种方式&quot; class=&quot;headerlink&quot; title=&quot;获取Class对象的三种方式&quot;&gt;&lt;/a&gt;获取Class对象的三种方式&lt;/h1&gt;&lt;p&gt;●Classc1 &amp;#x3D;类名.clas</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Junit</title>
    <link href="https://luckylittledye/github.io/2024/04/23/Junit/"/>
    <id>https://luckylittledye/github.io/2024/04/23/Junit/</id>
    <published>2024-04-23T08:15:46.000Z</published>
    <updated>2024-04-23T08:52:48.108Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Junit单元测试框架常用注解（Juint4）"><a href="#Junit单元测试框架常用注解（Juint4）" class="headerlink" title="Junit单元测试框架常用注解（Juint4）"></a>Junit单元测试框架常用注解（Juint4）</h1><p>@Test&emsp;测试类中的方法必须用它修饰才能成为测试方法，才能启动执行<br>@Before&emsp;用来修饰一个实例方法， 该方法会在每一一个测 试方法执行之前执行一次。<br>@After&emsp;来修饰一个实例方法， 该方法会在每一一个测 试方法执行之后执行一-次。<br>@BeforeClass&emsp;用来修饰一个静态方法， 该方法会在所有 测试方法之前只执行一次。<br>@AfterClass&emsp;用来修饰一个静态方法，该方法会在所有测试方法之后只执行一-次。<br>●在测试方法执行前执行的方法, 常用于:初始化资源。<br>●在测试方法执行完后再执行的方法，常用于:释放资源。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Junit单元测试框架常用注解（Juint4）&quot;&gt;&lt;a href=&quot;#Junit单元测试框架常用注解（Juint4）&quot; class=&quot;headerlink&quot; title=&quot;Junit单元测试框架常用注解（Juint4）&quot;&gt;&lt;/a&gt;Junit单元测试框架常用注解（J</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>study_Thread</title>
    <link href="https://luckylittledye/github.io/2024/03/18/study-Thread/"/>
    <id>https://luckylittledye/github.io/2024/03/18/study-Thread/</id>
    <published>2024-03-18T14:27:35.000Z</published>
    <updated>2024-04-21T15:15:53.792Z</updated>
    
    <content type="html"><![CDATA[<h1 id="多线程创建方式一：继承Thread类"><a href="#多线程创建方式一：继承Thread类" class="headerlink" title="多线程创建方式一：继承Thread类"></a>多线程创建方式一：继承Thread类</h1><p><em>1.定义一个子类MyThread继承线程类java.lang.Thread,重写run方法</em>  </p><p><em>2.创建MyThread类的对象</em>  </p><p><em>3.调用线程对象的start()方法启动线程</em>  </p><h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><p><em>优点：编码简单</em><br><em>缺点：线程类已经继承Thread,无法再继承其他类，不利于功能的扩展</em> </p><h1 id="多线程创建方式二：实现Runnable接口"><a href="#多线程创建方式二：实现Runnable接口" class="headerlink" title="多线程创建方式二：实现Runnable接口"></a>多线程创建方式二：实现Runnable接口</h1><p><em>1.定义一个线程任务类MyRunnable实现Runnable接口,重写run方法</em>  </p><p><em>2.创建MyRunnable任务对象</em>  </p><p><em>3.把MyRunnable任务对象交给Thread处理</em></p><p><em>4.调用线程对象的start()方法启动线程</em>  </p><h3 id="优缺点-1"><a href="#优缺点-1" class="headerlink" title="优缺点"></a>优缺点</h3><p><em>优点：任务类只是实现接口，可以继续继承其他类，实现其他接口，扩展性强</em>  </p><h2 id="方式二的匿名内部类写法"><a href="#方式二的匿名内部类写法" class="headerlink" title="方式二的匿名内部类写法"></a>方式二的匿名内部类写法</h2><p><em>1.创建Runnable的匿名内部类对象</em></p><p><em>2.交给Thread线程对象</em>  </p><p><em>3.调用线程对象的start()启动线程</em></p><h1 id="多线程创建方式三：利用Callable接口、FutureTask接口实现"><a href="#多线程创建方式三：利用Callable接口、FutureTask接口实现" class="headerlink" title="多线程创建方式三：利用Callable接口、FutureTask接口实现"></a>多线程创建方式三：利用Callable接口、FutureTask接口实现</h1><p><em>1.创建任务对象</em><br><em>-定义一个类实现Callable接口，重写call方法，封装要做的事和要返回的数据</em><br><em>-把Callable类型的对象封装成FuturetTask(线程任务对象)</em></p><p><em>2.把线程任务对象交给Thread对象</em></p><p><em>3.调用Thread对象的start方法启动线程</em></p><p><em>4.线程执行完毕后，通过FUtureTask对象的get方法去获取线程任务执行的结果</em></p><h3 id="优缺点-2"><a href="#优缺点-2" class="headerlink" title="优缺点"></a>优缺点</h3><p><em>优点：任务类只是实现接口，可以继续继承其他类，实现其他接口，扩展性强 ;<br>可以获取线程执行的结果</em>  </p><h1 id="线程同步方式一：同步代码块-写在方法内的"><a href="#线程同步方式一：同步代码块-写在方法内的" class="headerlink" title="线程同步方式一：同步代码块(写在方法内的)"></a>线程同步方式一：同步代码块(写在方法内的)</h1><p><em>synchronized(同步锁){<br>&emsp;&emsp;访问共享资源的核心代码<br>}<br>建议使用共享资源作为锁对象，实例方法用this，静态方法用类名.class<br>快捷键：ctrl+alt+t</em></p><h1 id="线程同步方式二：同步方法"><a href="#线程同步方式二：同步方法" class="headerlink" title="线程同步方式二：同步方法"></a>线程同步方式二：同步方法</h1><p><em>public synchronized void 方法() {}</em></p><h1 id="线程同步方式三：Lock锁"><a href="#线程同步方式三：Lock锁" class="headerlink" title="线程同步方式三：Lock锁"></a>线程同步方式三：Lock锁</h1><p><em>private final Lock lk&#x3D;new ReentrantLock();&#x2F;&#x2F;创建锁对象<br>public void 方法() {<br>&emsp;&emsp;&emsp;        try {<br>&emsp;&emsp;&emsp;&emsp;            lk.lock();&#x2F;&#x2F;加锁<br>&emsp;&emsp;&emsp;&emsp;            访问共享资源的核心代码<br>&emsp;&emsp;&emsp;        } catch (Exception e) {<br>&emsp;&emsp;&emsp;&emsp;            e.printStackTrace();<br>&emsp;&emsp;&emsp;        } finally {<br>&emsp;&emsp;&emsp;&emsp;            lk.unlock();&#x2F;&#x2F;解锁<br>&emsp;&emsp;&emsp;        }<br>}</em></p><h1 id="创建线程池"><a href="#创建线程池" class="headerlink" title="创建线程池"></a>创建线程池</h1><p><em>public ThreadPoolExecutor(&emsp;int corePoolSize,&#x2F;&#x2F;核心线程数量<br>&emsp;&emsp;&emsp;&emsp;int maximumPoolSize,&emsp;&#x2F;&#x2F;最大线程数量<br>&emsp;&emsp;&emsp;&emsp;long keepAliveTime,&emsp;&#x2F;&#x2F;临时线程存活时间<br>&emsp;&emsp;&emsp;&emsp;TimeUnit unit,&emsp;&#x2F;&#x2F;临时线程存活时间单位<br>&emsp;&emsp;&emsp;&emsp;BlockingQueue&lt;<code>Runnable</code>&gt; workQueue,&emsp;&#x2F;&#x2F;指定任务队列<br>&emsp;&emsp;&emsp;&emsp;ThreadFactory threadFactory,&emsp;&#x2F;&#x2F;指定线程工厂<br>&emsp;&emsp;&emsp;&emsp;RejectedExecutionHandler handler&emsp;&#x2F;&#x2F;任务拒绝策略)</em></p><h1 id="线程池处理任务"><a href="#线程池处理任务" class="headerlink" title="线程池处理任务"></a>线程池处理任务</h1><p><em>void execute(Runnable command)&emsp;&#x2F;&#x2F;处理Runnable任务<br>Future&lt;<code>T</code>&gt; submit(Callable&lt;<code>T</code>&gt; task)&emsp;&#x2F;&#x2F;执行Callable任务，返回未来任务对象，用于获取线程返回结果<br>void shutdown()&emsp;&#x2F;&#x2F;等全部任务执行完关闭线程池<br>List&lt;<code>Runnable</code>&gt; shutdownNow()&emsp;&#x2F;&#x2F;立刻关闭线程池</em></p><h1 id="线程池任务拒绝策略"><a href="#线程池任务拒绝策略" class="headerlink" title="线程池任务拒绝策略"></a>线程池任务拒绝策略</h1><p><em>ThreadPoolExecutor.AbortPolicy &emsp;&#x2F;&#x2F;丢弃任务并抛出异常，默认策略<br>ThreadPoolExecutor.DiscardPolicy &emsp;&#x2F;&#x2F;丢弃任务但不抛出异常<br>ThreadPoolExecutor.DiscardOldestPolicy &emsp;&#x2F;&#x2F;抛弃队列等待最久的任务，然后把当前任务加入队列<br>ThreadPoolExecutor.CallerRunsPolicy &emsp;&#x2F;&#x2F;由主线程负责调用任务方法从而绕过线程池直接执行</em>  </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;多线程创建方式一：继承Thread类&quot;&gt;&lt;a href=&quot;#多线程创建方式一：继承Thread类&quot; class=&quot;headerlink&quot; title=&quot;多线程创建方式一：继承Thread类&quot;&gt;&lt;/a&gt;多线程创建方式一：继承Thread类&lt;/h1&gt;&lt;p&gt;&lt;em&gt;1.</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Try_one</title>
    <link href="https://luckylittledye/github.io/2024/03/11/Try-one/"/>
    <id>https://luckylittledye/github.io/2024/03/11/Try-one/</id>
    <published>2024-03-11T14:07:28.000Z</published>
    <updated>2024-03-11T16:23:11.437Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p>在表达式中，byte,short,char是直接转换成int 参与运算的<br>byte a&#x3D;10;<br>short b&#x3D;20;<br>short c&#x3D;a+b;&#x2F;&#x2F;报错</p><p>强制类型转换快捷键  alt+enter</p><p>与  &amp;<br>或  |<br>非  ！<br>异或  ^</p><p>运行Java程序，主要看JVM的的3个内存区域：方法区，栈内存，堆内存</p>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;
&lt;p&gt;在表达式中，byte,short,char是直接转换成int 参与运算的&lt;br&gt;byte a&amp;#x3D;10;&lt;br&gt;short b&amp;#x3D;20;&lt;br&gt;short c&amp;#x3D;a+b;&amp;#x2F;&amp;#x2F;报错&lt;/p</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>my-first blog</title>
    <link href="https://luckylittledye/github.io/2024/02/13/my-first-blog/"/>
    <id>https://luckylittledye/github.io/2024/02/13/my-first-blog/</id>
    <published>2024-02-13T13:17:41.000Z</published>
    <updated>2024-02-13T13:19:05.040Z</updated>
    
    <content type="html"><![CDATA[<p>这是我的第一个博客。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这是我的第一个博客。&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://luckylittledye/github.io/2024/02/13/hello-world/"/>
    <id>https://luckylittledye/github.io/2024/02/13/hello-world/</id>
    <published>2024-02-12T18:23:25.184Z</published>
    <updated>2024-02-12T18:23:25.184Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
