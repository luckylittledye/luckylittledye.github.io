<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Try_one</title>
    <url>/2024/03/11/Try-one/</url>
    <content><![CDATA[<span id="more"></span>
<p>在表达式中，byte,short,char是直接转换成int 参与运算的<br>byte a&#x3D;10;<br>short b&#x3D;20;<br>short c&#x3D;a+b;&#x2F;&#x2F;报错</p>
<p>强制类型转换快捷键  alt+enter</p>
<p>与  &amp;<br>或  |<br>非  ！<br>异或  ^</p>
<p>运行Java程序，主要看JVM的的3个内存区域：方法区，栈内存，堆内存</p>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2024/02/13/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>study_Thread</title>
    <url>/2024/03/18/study-Thread/</url>
    <content><![CDATA[<h1 id="多线程创建方式一：继承Thread类"><a href="#多线程创建方式一：继承Thread类" class="headerlink" title="多线程创建方式一：继承Thread类"></a>多线程创建方式一：继承Thread类</h1><p><em>1.定义一个子类MyThread继承线程类java.lang.Thread,重写run方法</em>  </p>
<p><em>2.创建MyThread类的对象</em>  </p>
<p><em>3.调用线程对象的start()方法启动线程</em>  </p>
<h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><p><em>优点：编码简单</em><br><em>缺点：线程类已经继承Thread,无法再继承其他类，不利于功能的扩展</em> </p>
<h1 id="多线程创建方式二：实现Runnable接口"><a href="#多线程创建方式二：实现Runnable接口" class="headerlink" title="多线程创建方式二：实现Runnable接口"></a>多线程创建方式二：实现Runnable接口</h1><p><em>1.定义一个线程任务类MyRunnable实现Runnable接口,重写run方法</em>  </p>
<p><em>2.创建MyRunnable任务对象</em>  </p>
<p><em>3.把MyRunnable任务对象交给Thread处理</em></p>
<p><em>4.调用线程对象的start()方法启动线程</em>  </p>
<h3 id="优缺点-1"><a href="#优缺点-1" class="headerlink" title="优缺点"></a>优缺点</h3><p><em>优点：任务类只是实现接口，可以继续继承其他类，实现其他接口，扩展性强</em>  </p>
<h2 id="方式二的匿名内部类写法"><a href="#方式二的匿名内部类写法" class="headerlink" title="方式二的匿名内部类写法"></a>方式二的匿名内部类写法</h2><p><em>1.创建Runnable的匿名内部类对象</em></p>
<p><em>2.交给Thread线程对象</em>  </p>
<p><em>3.调用线程对象的start()启动线程</em></p>
<h1 id="多线程创建方式三：利用Callable接口、FutureTask接口实现"><a href="#多线程创建方式三：利用Callable接口、FutureTask接口实现" class="headerlink" title="多线程创建方式三：利用Callable接口、FutureTask接口实现"></a>多线程创建方式三：利用Callable接口、FutureTask接口实现</h1><p><em>1.创建任务对象</em><br><em>-定义一个类实现Callable接口，重写call方法，封装要做的事和要返回的数据</em><br><em>-把Callable类型的对象封装成FuturetTask(线程任务对象)</em></p>
<p><em>2.把线程任务对象交给Thread对象</em></p>
<p><em>3.调用Thread对象的start方法启动线程</em></p>
<p><em>4.线程执行完毕后，通过FUtureTask对象的get方法去获取线程任务执行的结果</em></p>
<h3 id="优缺点-2"><a href="#优缺点-2" class="headerlink" title="优缺点"></a>优缺点</h3><p><em>优点：任务类只是实现接口，可以继续继承其他类，实现其他接口，扩展性强;可以获取线程执行的结果</em>  </p>
]]></content>
  </entry>
  <entry>
    <title>my-first blog</title>
    <url>/2024/02/13/my-first-blog/</url>
    <content><![CDATA[<p>这是我的第一个博客。</p>
]]></content>
  </entry>
</search>
